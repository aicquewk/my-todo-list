{"version":3,"sources":["redux/types/todoState.ts","redux/selectors/getTodoList.ts","redux/selectors/getDoingList.ts","redux/selectors/getDoneList.ts","redux/actions/todoAction.ts","App.tsx","serviceWorker.ts","redux/reducers/todoStateReducer.ts","redux/store/index.ts","index.tsx"],"names":["TodoActionType","getTodoList","createSelector","state","todoStateReducer","todo","filter","status","getDoingList","getDoneList","nextId","useStyles","makeStyles","theme","root","width","display","flexDirection","paddingLeft","addButton","paddingTop","updateButton","marginLeft","spacing","title","wordWrap","description","whiteSpace","paper","minHeight","maxWidth","padding","name","App","classes","dispatch","useDispatch","useState","setTitle","setDesc","open","setOpen","isDisabled","setDisabled","todoList","useSelector","doingList","doneList","handleOnClickAdd","useCallback","type","Add","payload","id","add","handleClose","handleOnClickUpdate","Update","update","handleOnTitleChange","event","target","value","length","handleOnDescChange","style","gridTemplateColumns","gridGap","className","Paper","map","index","key","toString","color","fontWeight","Button","size","variant","onClick","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","onChange","required","fullWidth","rows","multiline","DialogActions","disabled","Boolean","window","location","hostname","match","initialState","todoReducer","action","item","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09517af8.chunk.js","sourcesContent":["export interface Todo{\r\n  id: number\r\n  title: string\r\n  description: string\r\n  status: string\r\n}\r\n\r\nexport interface TodoState {\r\n  todo: Todo[];\r\n}\r\n\r\nexport enum TodoActionType {\r\n  Add = \"Todo/Add\",\r\n  Update = \"Todo/Update\",\r\n}\r\n\r\nexport interface TodoAddAction {\r\n  type: TodoActionType.Add;\r\n  payload: Todo\r\n}\r\n\r\nexport interface TodoUpdateAction {\r\n  type: TodoActionType.Update;\r\n  payload: number\r\n}\r\n","import { createSelector } from \"reselect\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst getTodoState = (state: RootState) => state.todoStateReducer.todo;\r\n\r\nexport const getTodoList = createSelector(getTodoState, (todo) => todo.filter(todo => todo.status === \"TODO\"));\r\n\r\n","import { createSelector } from \"reselect\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst getDoingState = (state: RootState) => state.todoStateReducer.todo;\r\n\r\nexport const getDoingList = createSelector(getDoingState, (todo) => todo.filter(todo => todo.status === \"DOING\"));\r\n\r\n","import { createSelector } from \"reselect\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst getDoneState = (state: RootState) => state.todoStateReducer.todo;\r\n\r\nexport const getDoneList = createSelector(getDoneState, (todo) => todo.filter(todo => todo.status === \"DONE\"));\r\n\r\n","import {\r\n  TodoActionType,\r\n  TodoAddAction,\r\n  TodoUpdateAction,\r\n} from \"../types/todoState\";\r\n\r\nlet nextId = 0;\r\nexport function add(title: string, description: string): TodoAddAction {\r\n  return {\r\n    type: TodoActionType.Add,\r\n    payload: {\r\n      id: nextId++,\r\n      title: title,\r\n      description: description,\r\n      status: \"TODO\",\r\n    },\r\n  };\r\n}\r\n\r\nexport function update(id: number): TodoUpdateAction {\r\n  return {\r\n    type: TodoActionType.Update,\r\n    payload: id\r\n  };\r\n}\r\n","import React, { FC, useCallback, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getTodoList } from \"./redux/selectors/getTodoList\";\r\nimport { getDoingList } from \"./redux/selectors/getDoingList\";\r\nimport { getDoneList } from \"./redux/selectors/getDoneList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { add, update } from \"./redux/actions/todoAction\";\r\n\r\nconst useStyles = makeStyles(\r\n  (theme) => ({\r\n    root: {\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n    },\r\n    status: {\r\n      paddingLeft: \"15px\",\r\n    },\r\n    addButton: {\r\n      paddingTop: \"32px\",\r\n      paddingLeft: \"94%\",\r\n    },\r\n    updateButton: {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n    title: {\r\n      wordWrap: \"break-word\",\r\n    },\r\n    description: {\r\n      paddingLeft: \"16px\",\r\n      wordWrap: \"break-word\",\r\n      whiteSpace: \"pre-line\",\r\n    },\r\n    paper: {\r\n      minHeight: 300,\r\n      width: \"90%\",\r\n      maxWidth: 400,\r\n      padding: 15,\r\n    },\r\n  }),\r\n  { name: \"App\" }\r\n);\r\n\r\nconst App: FC = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDesc] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const [isDisabled, setDisabled] = useState(true);\r\n  const todoList = useSelector(getTodoList);\r\n  const doingList = useSelector(getDoingList);\r\n  const doneList = useSelector(getDoneList);\r\n\r\n  const handleOnClickAdd = useCallback(() => {\r\n    dispatch(add(title, description));\r\n    setTitle(\"\");\r\n    setDesc(\"\");\r\n    setDisabled(true);\r\n    handleClose();\r\n  }, [dispatch, title, description, setTitle, setDesc]);\r\n\r\n  const handleOnClickUpdate = useCallback(\r\n    (id) => {\r\n      dispatch(update(id));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const handleOnTitleChange = useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(event.target.value);\r\n      event.target.value.length > 0 ? setDisabled(false) : setDisabled(true);\r\n    },\r\n    [setTitle, setDisabled]\r\n  );\r\n\r\n  const handleOnDescChange = useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setDesc(event.target.value);\r\n    },\r\n    [setDesc]\r\n  );\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        padding: 32,\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(3, 1fr)\",\r\n          gridGap: 15,\r\n        }}\r\n      >\r\n        <div className={classes.root}>\r\n          <div className={classes.status}>\r\n            <b>Todo</b>\r\n          </div>\r\n          <br />\r\n          <Paper className={classes.paper}>\r\n            {todoList.map((todo, index) => (\r\n              <span\r\n                className={classes.title}\r\n                key={index.toString()}\r\n                style={{ color: \"#0000CD\", fontWeight: \"bold\" }}\r\n              >\r\n                {`${index + 1}. ${todo.title}`}\r\n\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  onClick={() => handleOnClickUpdate(todo.id)}\r\n                  className={classes.updateButton}\r\n                >\r\n                  Update\r\n                </Button>\r\n                <p className={classes.description}>{`${todo.description}`}</p>\r\n              </span>\r\n            ))}\r\n          </Paper>\r\n        </div>\r\n        <div className={classes.root}>\r\n          <div className={classes.status}>\r\n            <b>Doing</b>\r\n          </div>\r\n          <br />\r\n          <Paper className={classes.paper}>\r\n            {doingList.map((todo, index) => (\r\n              <span\r\n                className={classes.title}\r\n                key={index.toString()}\r\n                style={{ color: \"#FFCC00\", fontWeight: \"bold\" }}\r\n              >\r\n                {`${index + 1}. ${todo.title}`}\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  onClick={() => handleOnClickUpdate(todo.id)}\r\n                  className={classes.updateButton}\r\n                >\r\n                  Update\r\n                </Button>\r\n                <p className={classes.description}>{`${todo.description}`}</p>\r\n              </span>\r\n            ))}\r\n          </Paper>\r\n        </div>\r\n        <div className={classes.root}>\r\n          <div className={classes.status}>\r\n            <b>Done</b>\r\n          </div>\r\n          <br />\r\n          <Paper className={classes.paper}>\r\n            {doneList.map((todo, index) => (\r\n              <span\r\n                className={classes.title}\r\n                key={index.toString()}\r\n                style={{ color: \"#32CD32\", fontWeight: \"bold\" }}\r\n              >\r\n                {`${index + 1}. ${todo.title}`}\r\n                <p className={classes.description}>{`${todo.description}`}</p>\r\n              </span>\r\n            ))}\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n      <div className={classes.addButton}>\r\n        <Button variant=\"contained\" onClick={handleClickOpen} color=\"primary\">\r\n          Add\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Adding todolist</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"title\"\r\n              label=\"Title\"\r\n              value={title}\r\n              onChange={handleOnTitleChange}\r\n              variant=\"outlined\"\r\n              required\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              margin=\"dense\"\r\n              id=\"description\"\r\n              label=\"Description\"\r\n              value={description}\r\n              variant=\"outlined\"\r\n              onChange={handleOnDescChange}\r\n              rows={4}\r\n              multiline\r\n              fullWidth\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              disabled={isDisabled}\r\n              onClick={handleOnClickAdd}\r\n              color=\"primary\"\r\n            >\r\n              OK\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { TodoState, TodoActionType } from \"../types/todoState\";\r\n\r\nexport const initialState: TodoState = {\r\n  todo: [],\r\n};\r\n\r\nfunction todoReducer(state = initialState, action: any): TodoState {\r\n  switch (action.type) {\r\n    case TodoActionType.Add:\r\n      return { ...state, todo: [...state.todo, action.payload] };\r\n    case TodoActionType.Update:\r\n      return {\r\n        ...state,\r\n        todo: state.todo.map((item, id) =>\r\n          id === action.payload\r\n            ? item.status === \"TODO\"\r\n              ? { ...item, status: \"DOING\" }\r\n              : { ...item, status: \"DONE\" }\r\n            : item\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default todoReducer;\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport todoStateReducer from \"../reducers/todoStateReducer\";\r\n\r\nconst rootReducer = combineReducers({ todoStateReducer });\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(ReduxThunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}